global pub, external;
use std/prelude;

pub fn add<T>(T x, T y) -> T {
    return x + y;
}

local struct Foo<T, V> @nofmt {
    T a;
    V b;
};

fn bar(ElleMeta meta, ...args) {
    for i32 i = 0; i < meta.arity; i += 1 {
        string arg = args.yield(string);
        io::println(arg);
    }
}

pub external fn fprintf(FILE *fd, string formatter, ...);

fn add2(i32 x, i32 y) @alias("foo") @volatile -> i32 {
    return x + y;
}

fn main(string[] args) {
    let program = args.remove(0);
    let foo = nil;
    Foo<i32> x = Foo { a = 1 };
    Foo<string> y = Foo { a = "hello world!" };

    add2(1,2);

    add<i32>(1, 2);
    add<f32>(1.2, 1.3);

    $dbg(foo);
}


