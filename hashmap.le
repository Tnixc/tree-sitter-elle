use std/collections/array;
use std/collections/tuple;
use std/libc/io;
use std/hashes;
use std/core;
use std/math;

global pub;

const void *HashMap_EMPTY = i32::min();

struct HashMap_Bucket {
    void *key;
    void *value;
    bool full;
};

fn HashMap_Bucket::new(void *key, void *value, bool full) {
    let bucket = #alloc(HashMap_Bucket);

    bucket.key = key;
    bucket.value = value;
    bucket.full = full;

    return bucket;
}

struct HashMap<T, U> {
    HashMap_Bucket *[] table;
    i32 size;
    i32 capacity;
};

!pub fn __internal_key_exists_check<T, U>(HashMap<T, U> *self, T key, ElleMeta meta) {
    if !self.contains_key(key) {
        io::cprintf(
            "[%s:%d%d] ERROR: Key '%s' does not exist in this HashMap.\n"
                .color("red")
                .reset(),
            meta.file,
            meta.line,
            meta.column,
            key.__fmt__(0)
        );

        libc::abort();
    }
}

fn HashMap::__load__<T, U>(ElleMeta meta, HashMap<T, U> *self, T key) {
    __internal_key_exists_check(self, key, meta);
    return self.get(key);
}

fn HashMap::__store__<T, U>(HashMap<T, U> *self, T key, U value) {
    self.put(key, value);
}

fn HashMap::__fmt__<T, U>(HashMap<T, U> self, i32 nesting) {
    let res = "{\n";

    for i32 i = 0; i < self.table.len(); i += 1 {
        T key = self.table[i].key;
        U value = self.table[i].value;

        if !self.table[i].full {
            continue;
        }

        res.extend(" ".repeat(4));
        res.extend(key.__fmt__(0));
        res.extend(" => ");
        res.extend(value.__fmt__(0));
        res.push('\n');
    }

    res.push('}');
    return res;
}

fn HashMap::with_capacity<T, U>(i32 initial_capacity) -> HashMap<T, U> * {
    let map = #alloc(HashMap<T, U>);

    map.table = Array::with_capacity(initial_capacity);
    map.capacity = initial_capacity;
    map.size = 0;

    for let i = 0; i < initial_capacity; i += 1 {
        map.table.push(HashMap_Bucket::new(HashMap_EMPTY, HashMap_EMPTY, false));
    }

    return map;
}

fn HashMap::new<T, U>() -> HashMap<T, U> * {
    return HashMap::with_capacity(4);
}

// first_key, first_value are to infer T and U
fn HashMap::with_entries<T, U>(ElleMeta meta, T first_key, U first_value, ...args) -> HashMap<T, U> * {
    let map = HashMap::with_capacity(4);
    map[first_key] = first_value;

    // subtract the first_key and first_value;
    for let i = 0; i < meta.arity - 2; i += 2 {
        T key = args.yield(T);
        U value = args.yield(U);

        map[key] = value;
    }

    return map;
}

fn HashMap::put<T, U>(HashMap<T, U> *self, T key, U value) -> bool {
    if self.size >= self.capacity / 2 {
        self.resize(self.capacity * 2);
    }

    i32 idx = key.__hash__(self.capacity);
    let start_idx = idx;

    while true {
        if (!self.table[idx].full) || ((T)(self.table[idx].key) == key) {
            if !self.table[idx].full {
                self.size += 1;
            }

            self.table[idx].key = (void *)key;
            self.table[idx].value = (void *)value;
            self.table[idx].full = true;
            return true;
        }

        idx = (idx + 1) % self.capacity;

        if idx == start_idx {
            return false;
        }
    }

    return false;
}

external fn HashMap::put<T, U>(HashMap<T, U> *self, T key, U value) @alias(HashMap::set) -> bool;

!pub fn __internal_hashmap_get<T, U>(HashMap<T, U> *self, T key) -> U {
    i32 idx = key.__hash__(self.capacity);
    let start_idx = idx;

    while self.table[idx].full {
        if (T)(self.table[idx].key) == key {
            return (U)(self.table[idx].value);
        }

        idx = (idx + 1) % self.capacity;

        if idx == start_idx {
            break;
        }
    }

    return (U)nil;
}

// Panics if the key does not exist
fn HashMap::get<T, U>(ElleMeta meta, HashMap<T, U> *self, T key) {
    __internal_key_exists_check(self, key, meta);
    return __internal_hashmap_get(self, key);
}

fn HashMap::get_or_insert<T, U>(HashMap<T, U> *self, T key, U value) {
    if self.contains_key(key) {
        return self.get(key);
    }

    self.set(key, value);
    return value;
}

// Returns nil (0) if the key does not exist
fn HashMap::safe_get<T, U>(HashMap<T, U> *self, T key) -> U {
    return __internal_hashmap_get(self, key);
}

fn HashMap::remove<T, U>(HashMap<T, U> *self, T key) -> U {
    i32 idx = key.__hash__(self.capacity);
    let start_idx = idx;

    while self.table[idx].full {
        if (T)(self.table[idx].key) == key {
            U value = self.table[idx].value;

            self.table[idx].key = HashMap_EMPTY;
            self.table[idx].value = HashMap_EMPTY;
            self.table[idx].full = false;
            self.size -= 1;

            return value;
        }

        idx = (idx + 1) % self.capacity;

        if idx == start_idx {
            break;
        }
    }

    return (U)nil;
}

fn HashMap::contains_key<T, U>(HashMap<T, U> *self, T key) -> bool {
    i32 idx = key.__hash__(self.capacity);
    let start_idx = idx;

    while self.table[idx].full {
        if (T)(self.table[idx].key) == key {
            return true;
        }

        idx = (idx + 1) % self.capacity;

        if idx == start_idx {
            break;
        }
    }

    return false;
}

fn HashMap::keys<T, U>(HashMap<T, U> *self) -> T[] {
    let array = Array::with_capacity(self.size);

    for i32 i = 0; i < self.capacity; i += 1 {
        if self.table[i].full {
            array.push((T)self.table[i].key);
        }
    }

    return array;
}

fn HashMap::resize<T, U>(HashMap<T, U> *self, i32 new_capacity) {
    HashMap_Bucket *[] old_table = self.table;

    self.table = Array::with_capacity(new_capacity);
    self.capacity = new_capacity;
    self.size = 0;

    for i32 i = 0; i < new_capacity; i += 1 {
        self.table.push(HashMap_Bucket::new(HashMap_EMPTY, HashMap_EMPTY, false));
    }

    for i32 i = 0; i < old_table.len(); i += 1 {
        if old_table[i].full {
            self.put((T)(old_table[i].key), (U)(old_table[i].value));
        }
    }
}

fn HashMap::size<T, U>(HashMap<T, U> *self) -> i32 {
    return self.size;
}

fn HashMap::is_empty<T, U>(HashMap<T, U> *self) -> bool {
    return self.size == 0;
}

fn HashMap::clear<T, U>(HashMap<T, U> *self) -> void {
    self.size = 0;

    for i32 i = 0; i < self.capacity; i += 1 {
        self.table[i].full = false;
        self.table[i].key = HashMap_EMPTY;
        self.table[i].value = HashMap_EMPTY;
    }
}
